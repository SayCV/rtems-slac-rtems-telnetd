 Changes since telnetd-1.2:
  - use union around sockaddr_in/sockaddr to silence 'type-punned pointer'
    warnings.
  - added wrapper around task creation (task that runs the shell). This
    wrapper can be changed by the user (telnetd_spawn_task pointer variable).
	Mostly useful to install 'epicsThreadCreate' here [interface miraculously
	matches this] so that the EPICS iocsh can be run from a telnet session.
	(Many EPICS commands assume they are run from an 'epicsThread' which
	has extra context information not present on native RTEMS threads.)

 Changes since telnetd-1.0:

  - plugged the most blatant security holes (NOTE: telnetd probably still
    cannot be considered "secure"):
     o added support for a simple (unix-style) password. The encrypted
       password is read from an environment variable or a hardcoded default.
     o limit the maximal number of simultaneous connections (this was
       implemented alread but a delay was added).
     o disconnect after some time if the peer doesn't send a password.
     o disconnect after a few authentication failures and send message
       to syslog.
     o syslog connection establishment/shutdown (#ifdef PARANOIA).

   - made 'PTY' a truly polling driver (at the expense of some CPU time -
     I use a pretty long polling interval, though [2s]). This makes e.g.
     termios VTIME work properly (unless VTIME < polling interval).
 
   - PTY now passes telnet CRLF through (use termios igncr to strip CR)
     but maps telnet CRNUL to CR.

   - "reentryfied" BSD '__des_crypt()'.

   - use more specific names for global symbols; 'localized' most
     private ones.
